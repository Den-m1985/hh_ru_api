package com.example.service.telegram;

import com.example.util.TelegramProperties;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Slf4j
@Component
@RequiredArgsConstructor
public class MyTelegramBot extends TelegramLongPollingBot {
    private final TelegramProperties telegramProperties;
    private final TelegramLinkService telegramLinkService;
    private final TelegramService telegramService;
    private final TelegramKeyboardFactory keyboardFactory;


    @Override
    public String getBotUsername() {
        return telegramProperties.getBot().getUsername();
    }

    @Override
    public String getBotToken() {
        return telegramProperties.getBot().getToken();
    }

    public void sendStartMessage(Long chatId) {
        String welcomeText = """
                üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
                
                –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–∏—Å–∞:
                
                Job Responder
                
                –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
                
                1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Postman –∏–ª–∏ frontend
                2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ GET-–∑–∞–ø—Ä–æ—Å –∫ /v1/telegram/link
                3. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤–∏–¥–∞: `2e310a`
                4. –í–≤–µ–¥–∏—Ç–µ –≤ –±–æ—Ç–µ:
                `/link 2e310a`
                """;
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(welcomeText);
        message.setParseMode("Markdown");

        message.setReplyMarkup(keyboardFactory.mainMenuKeyboard());
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
//        message.setReplyMarkup(keyboardFactory.linkButtonKeyboard());
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("chatId: {}, error message: {}", chatId, e.getMessage());
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            String text = message.getText();
            Long telegramUserId = message.getFrom().getId();

            switch (text) {
                case "/start" -> sendStartMessage(chatId);
                case "/link" -> sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞:\n/link <–∫–æ–¥>");
                default -> {
                    if (text.startsWith("/link ")) {
                        String code = text.substring(6).trim();
                        telegramLinkService.getUserIdByCode(code).ifPresentOrElse(userId -> {
                            telegramService.bindTelegramChat(userId, chatId, telegramUserId);
                            sendMessage(chatId, "‚úÖ –£—Å–ø–µ—à–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω.");
                        }, () -> sendMessage(chatId, "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥."));
                    } else {
                        sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –º–µ–Ω—é.");
                    }
                }
            }
        }
    }

    public void sendMessage(Long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(textToSend);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error(e.getMessage());
        }
    }

}
